What is an Object?
Real-world objects share two characteristics: They all have state and behavior. Dogs have state (name, color, breed, hungry)
and behavior (barking, fetching, wagging tail). Bicycles also have state (current gear, current pedal cadence, current speed)
and behavior (changing gear, changing pedal cadence, applying brakes). Identifying the state and behavior for real-world
objects is a great way to begin thinking in terms of object-oriented programming.

Software objects are conceptually similar to real-world objects: they too consist of state and related behavior. An object
stores its state in fields (variables in some programming languages) and exposes its behavior through methods (functions
in some programming languages). Methods operate on an object's internal state and serve as the primary mechanism for
object-to-object communication. Hiding internal state and requiring all interaction to be performed through an object's
methods is known as data encapsulation â€” a fundamental principle of object-oriented programming.

What is a Class?
A class is a blueprint or prototype from which objects are created, in short a template for the Object.
In the real world, you'll often find many individual objects all of the same kind. There may be thousands of other bicycles
in existence, all of the same make and model. Each bicycle was built from the same set of blueprints and therefore contains
the same components. In object-oriented terms, we say that your bicycle is an instance of the class of objects known as bicycles.
A class is the blueprint from which individual objects are created.

What Is Inheritance?
Different kinds of objects often have a certain amount in common with each other. Mountain bikes, road bikes, and tandem bikes,
for example, all share the characteristics of bicycles (current speed, current pedal cadence, current gear). Yet each also
defines additional features that make them different: tandem bicycles have two seats and two sets of handlebars; road bikes
have drop handlebars; some mountain bikes have an additional chain ring, giving them a lower gear ratio.

Object-oriented programming allows classes to inherit commonly used state and behavior from other classes. In this example,
Bicycle now becomes the superclass of MountainBike, RoadBike, and TandemBike. In the Java programming language, each class
is allowed to have one direct superclass, and each superclass has the potential for an unlimited number of subclasses:

class MountainBike extends Bicycle {

    // new fields and methods defining
    // a mountain bike would go here

}

What Is an Interface?
As you've already learned, objects define their interaction with the outside world through the methods that they expose.
Methods form the object's interface with the outside world; the buttons on the front of your television set, for example,
are the interface between you and the electrical wiring on the other side of its plastic casing. You press the "power"
button to turn the television on and off.

In its most common form, an interface is a group of related methods with empty bodies. A bicycle's behavior, if specified
as an interface, might appear as follows:

interface Bicycle {

    //  wheel revolutions per minute
    void changeCadence(int newValue);

    void changeGear(int newValue);

    void speedUp(int increment);

    void applyBrakes(int decrement);
}

To implement this interface, the name of your class would change (to a particular brand of bicycle, for example, such as ACMEBicycle),
and you'd use the implements keyword in the class declaration:

class ACMEBicycle implements Bicycle {

    int cadence = 0;
    int speed = 0;
    int gear = 1;

   // The compiler will now require that methods
   // changeCadence, changeGear, speedUp, and applyBrakes
   // all be implemented. Compilation will fail if those
   // methods are missing from this class.

    void changeCadence(int newValue) {
         cadence = newValue;
    }

    void changeGear(int newValue) {
         gear = newValue;
    }

    void speedUp(int increment) {
         speed = speed + increment;
    }

    void applyBrakes(int decrement) {
         speed = speed - decrement;
    }

    void printStates() {
         System.out.println("cadence:" +
             cadence + " speed:" +
             speed + " gear:" + gear);
    }


What is a Package?
A package is a namespace that organizes a set of related classes and interfaces. Conceptually you can think of packages as
being similar to different folders on your computer. You might keep HTML pages in one folder, images in another, and scripts
or applications in yet another. Because software written in the Java programming language can be composed of hundreds or
thousands of individual classes, it makes sense to keep things organized by placing related classes and interfaces into packages.
